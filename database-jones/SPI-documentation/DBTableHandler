/* 
   A DBTableHandler is a persistent metadata object that combines table 
   information from the data dictionary with user-supplied information about 
   column selection, column name mapping, and data conversion handlers.

*/

/* Related objects:
   TableMetadata: as defined in api/TableMetadata
   TableMapping:  as defined in api/TableMapping 
*/


/* DBTableHandler() constructor
   IMMEDIATE

   Create a DBTableHandler for a table and a mapping.

   If tableMetadata is null or has no columns, this returns null.

   If the TableMapping is null, default mapping behavior will be used.
   Default mapping behavior is to:
     select all columns when reading
     use default converters for all data types
     perform no remapping between field names and column names
*/
  function DBTableHandler(tableMetadata, tableMapping, domainObjConstructor) {};


/************************************************
      Methods for working with mapped objects 
 ************************************************/


/* DBTableHandler.newResultObject
   IMMEDIATE
   
   Create a new object using the constructor function (if set).
*/
  function newResultObject() {};
  

/* getNumberOfColumns()
   IMMEDIATE 
     
   Returns the number of columns used by mapped fields
*/
  getNumberOfColumns();


/* getAllColumnMetadata()
   IMMEDIATE 
   
   Returns an array of ColumnMetadata objects
*/   
  getAllColumnMetadata();

  
/* get()
   IMMEDIATE
   
   Return the property of obj corresponding to columnNumber
*/
  get(obj, columnNumber);


/* getColumns(domainObject)
   IMMEDIATE 
   
   Returns an array of column values corresponding to domainObject
*/
  getColumns(obj);

/* getColumnsWithListener(domainObject, adapter, columnValueDefinedListener)
   IMMEDIATE 
   
   Returns an array of column values corresponding to domainObject.
   Calls into columnValueDefinedListener to indicate whether each field is defined.
   Calls into databaseTypeConverter for adapter if needed.
*/
  getColumnsWithListener(obj, adapter, columnValueDefinedListener);


/* set() 
   IMMEDIATE
  
   Set any fields of object mapped to column columnNumber using value.
   Returns true on success, false on failure.
*/
  set(obj, columnNumber, value);


/* setFields()
   IMMEDIATE
   
   Set all mapped fields in object according to an ordered array of column values
*/
  setFields(obj, values);
  

/* DBIndexHandler getIndexHandler(Object keys)
   IMMEDIATE

   Given an object containing keys as defined in API Context.find(),
   choose an index to use as an access path for the operation,
   and return a DBIndexHandler for that index.
   
   DBIndexHandler implements this subset of DBTableHandler methods:
      getMappedFieldCount()
      get()
      getColumns()

    TODO: Provide separate documentation for DBIndexHandler
          DBIndexHandler now does more than this
*/
  getIndexHandler(keys);
